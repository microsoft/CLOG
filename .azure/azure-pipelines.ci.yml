#
# Continuous Integration (CI) Pipeline
#

trigger:
  batch: true
  branches:
    include:
    - main
    - release/*
    - feature/*
pr:
- main
- release/*
- feature/*

variables:
- name: buildConfiguration
  value: 'Release'
- name: runCodesignValidationInjection
  value: false
- name: skipComponentGovernanceDetection
  value: true

name: 0.$(Date:yyyy).$(Date:MM).$(DayOfMonth).$(Rev:rr).0

stages:
- stage: build
  displayName: Build
  jobs:
  - job: build_clog
    displayName: Build CLOG
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: sdk
        version: 3.1.302
        installationPath: $(Agent.ToolsDirectory)/dotnet
    - task: DotNetCoreCLI@2
      inputs:
        command: build
        projects: clog.sln
        arguments: --configuration $(buildConfiguration)
    - publish: $(System.DefaultWorkingDirectory)/src/nupkg
      artifact: ToolNuPkg
- stage: examples
  displayName: Examples
  dependsOn:
  - build
  jobs:
  - job: build_example
    displayName: Build Example
    strategy:
      matrix:
        linux:
          imageName: 'ubuntu-latest'
        mac:
          imageName: 'macos-10.14'
        windows:
          imageName: 'windows-latest'
    pool:
      vmImage: $(imageName)
    steps:
    - task: UseDotNet@2
      condition: ne(variables.imageName, 'windows-latest')
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: sdk
        version: 3.1.302
        installationPath: $(Agent.ToolsDirectory)/dotnet
    - task: DownloadPipelineArtifact@2
      displayName: Download Artifacts
      inputs:
        artifact: ToolNuPkg
        path: $(System.DefaultWorkingDirectory)/nupkg
    - pwsh: |
        if ($IsLinux) {
          sudo apt-add-repository ppa:lttng/stable-2.11
          sudo apt-get update
          sudo apt-get install -y liblttng-ust-dev
          sudo apt-get install -y lttng-tools
        }
        dotnet tool install --global --add-source $(System.DefaultWorkingDirectory)/nupkg Microsoft.Logging.CLOG
        dotnet tool install --global --add-source $(System.DefaultWorkingDirectory)/nupkg Microsoft.Logging.CLOG2Text.Lttng

        mkdir build
        clog --installDirectory build/clog
        cd build
        $env:CLOG_DEVELOPMENT_MODE = 1
        cmake ../examples
        cmake --build .

        if ($IsLinux) {
          cd clogsample
          mkdir log
          mkdir log/lttng
          lttng create clogsample -o=log/lttng
          lttng enable-event --userspace CLOG_*
          lttng start

          ./clogsample

          lttng stop clogsample
          babeltrace --names all log/lttng/* > log/quic.babel
          clog2text_lttng -i log/quic.babel -s ../../examples/examples/sidecar/clog.sidecar -o log/quic.log
          cat log/quic.log

          rm -rf log/lttng
          mkdir log/lttng

          Write-Host "Running with Dynamic Tracepoint Provider"

          lttng create clogsampledyn -o=log/lttng
          lttng enable-event --userspace CLOG_*
          lttng start

          $env:LD_PRELOAD="$PWD/libclogsampletracepointprovider.so"
          ./clogsampledynamictp

          $env:LD_PRELOAD=""

          lttng stop clogsampledyn
          babeltrace --names all log/lttng/* > log/quic.babel
          clog2text_lttng -i log/quic.babel -s ../../examples/examples/sidecar/clog.sidecar -o log/quic.log
          cat log/quic.log

        }

      displayName: Test Sample Build
